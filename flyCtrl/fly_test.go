package fly

import (
	"gobot.io/x/gobot"
	"net"
	"testing"
	"time"
)

func TestGobot(t *testing.T) {
	drone := NewDriver()
	var x interface{} = drone

	if _, ok := x.(gobot.Driver); !ok {
		t.Errorf("Driver does not implement gobot.Driver")
		var _ gobot.Driver = drone
	}

}

func TestNormalize(t *testing.T) {
	values := make(map[float64]byte)
	values[-1.0] = 0x01
	values[0.0] = 0x80
	values[1.0] = 0xff
	values[9.0] = 0xff
	values[-9.0] = 0x01

	for f, b := range values {
		bb := normalize(f)
		if bb != b {
			t.Errorf("Value %f should be normalized to %#x, but is %#x", f, b, bb)
		}
	}
}

func TestCrcValidation(t *testing.T) {
	commands := [][]byte{ // coommands with crc
		{0x66, 0x58, 0x7e, 0x80, 0x84, 0x00, 0x22, 0x99},
		{0x66, 0x7f, 0x58, 0x80, 0x84, 0x00, 0x23, 0x99},
		{0x66, 0x7f, 0x7b, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x99},
		{0x66, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x99},
		{0x66, 0x80, 0x80, 0x01, 0x84, 0x00, 0x85, 0x99},
		{0x66, 0x80, 0x80, 0x01, 0x84, 0x00, 0x85, 0x99},
		{0x66, 0x80, 0x80, 0x02, 0x84, 0x00, 0x86, 0x99},
		{0x66, 0x80, 0x80, 0x7c, 0x05, 0x00, 0x79, 0x99},
		{0x66, 0x80, 0x80, 0x80, 0x84, 0x00, 0x04, 0x99},
		{0x66, 0x80, 0x80, 0x80, 0x84, 0x00, 0x04, 0x99},
		{0x66, 0x80, 0x80, 0x83, 0xff, 0x00, 0x7c, 0x99},
		{0x66, 0x80, 0x80, 0x86, 0x84, 0x00, 0x02, 0x99},
		{0x66, 0x80, 0x80, 0xff, 0x84, 0x00, 0x7b, 0x99},
		{0x66, 0x80, 0xa7, 0x80, 0x84, 0x00, 0x23, 0x99},
		{0x66, 0x85, 0x7e, 0x80, 0x84, 0x00, 0xff, 0x99},
		{0x66, 0xa7, 0x80, 0x80, 0x84, 0x00, 0x23, 0x99},
	}
	for _, data := range commands {
		cmd := Cmd{data: data}
		if !cmd.isValid() {
			t.Errorf("Valid crc considered invalid (%s)\n", cmd.String())
		}
	}
}

func TestCrcComputation(t *testing.T) {
	commands := [][]byte{ // commands without crc
		{0x66, 0x58, 0x7e, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x7f, 0x58, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x7f, 0x7b, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x00, 0x80, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x01, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x01, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x02, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x7c, 0x05, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x83, 0xff, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0x86, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0x80, 0xff, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x80, 0xa7, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0x85, 0x7e, 0x80, 0x84, 0x00, 0x00, 0x99},
		{0x66, 0xa7, 0x80, 0x80, 0x84, 0x00, 0x00, 0x99},
	}
	for _, data := range commands {
		cmd := Cmd{data: data}
		cmd.data[crcByte] = 0
		cmd.data[crcByte] = crc(cmd.data)
		if !cmd.isValid() {
			t.Errorf("Crc not validly computed (%s)\n", cmd.String())
		}
	}
}

func TestNewDriver(t *testing.T) {
	driver := NewDriver("192.168.0.1:50000")
	t.Log(driver.cmd.String())

	driver.Sticks(1, 0, 0, 0)
	t.Log(driver.cmd.String())

	driver.Sticks(0, 0, 0, 0)
	t.Log(driver.cmd.String())

	driver.TakeOff()
	t.Log(driver.cmd.String())

	time.Sleep(time.Second * 2)

	driver.Land()
	t.Log(driver.cmd.String())

	driver.Calibrate()
	t.Log(driver.cmd.String())

	time.Sleep(time.Second * 2)

	driver.Stop()
	t.Log(driver.cmd.String())

	time.Sleep(time.Second * 2)

	t.Log(driver.cmd.String())
}

// Drones LEDs should stop blinking for 10s
func TestBind(t *testing.T) {
	driver := NewDriver("192.168.0.1:50000")
	driver.onError = func(err error) {
		t.Error("fail", err)
	}

	driver.Start()
	time.Sleep(time.Second * 10)
	driver.Halt()
}

func TestCapture(t *testing.T) {
	driver := NewDriver("192.168.0.1:50000")
	driver.OnError(func(err error) {
		t.Error("fail", err)
	})

	driver.Start()
	defer driver.Halt()

	t.Log(driver.cmd.String())
	time.Sleep(time.Second * 5)

	driver.TakePhoto()
	t.Log(driver.cmd.String())

	time.Sleep(time.Second * 3)

	driver.CaptureVideo()
	t.Log(driver.cmd.String())

	time.Sleep(time.Second * 3)

	driver.CaptureVideo()
	t.Log(driver.cmd.String())

	time.Sleep(time.Second * 5)
}

func TestInterfaces(t *testing.T) {
	iface, _ := net.InterfaceByName("wi2")
	println(iface.Name)
}
