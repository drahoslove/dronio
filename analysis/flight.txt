# controls
## UDP 50000

15 - 20 / second

66 80 80 00 80 00 80 99 // no altitude hold

66 80 80 80 80 00 00 99 // neutral

         vv
66 80 80 ff 80 00 7f 99 // up
66 80 80 01 80 00 81 99 // down
         ^^
            vv
66 80 80 80 01 00 81 99 // rot left
66 80 80 80 ff 00 7f 99 // rot right
            ^^
      vv
66 80 a8 80 80 00 28 99 // tilt forwards	- slow speed
66 80 59 80 80 00 d9 99 // tilt backwards	- slow speed
      ^^
   vv
66 58 81 80 80 00 d9 99 // roll left	- slow speed
66 a7 80 80 84 00 23 99 // roll right	-slow speed
   ^^
                v
66 80 80 80 80 01 01 99 // takeOff	- for 1s
66 80 80 80 80 02 02 99 // land		- for 1s
66 80 80 80 80 04 04 99 // stop
66 80 80 80 80 08 08 99 // flip		- 'til right stick
                ^
               v
66 80 80 80 80 10 10 99 // compass on
66 80 80 80 80 80 80 99 // gyro calib - for 1s
               ^


0: 66
1: <58-80-af> roll
2: <58-80-af> pitch
3: <01-80-ff> throttle
4: <01-80-ff> yaw
5: [takeOff, land, stop, flip, compass, ?, ?, gyro]
6: crc8 with polynom = 1
7: 99

CRC:


 <-[][][][][][][][] <-- xor <---
|                        ^
-->----------------------|

function crc(bytes) {
	return bytes
		.reduce((bits, byte) => bits.concat([7, 6, 5, 4, 3, 2, 1, 0].map(i => byte >> i & 1)), [])
		.reduce((rem, bit) => ((rem << 1) + (rem >> 7) ^ bit) % 256, 255)
}

[
	[0x66, 0x58, 0x7e, 0x80, 0x84, 0x00, 0x22, 0x99,],
	[0x66, 0x7f, 0x58, 0x80, 0x84, 0x00, 0x23, 0x99,],
	[0x66, 0x7f, 0x7b, 0x80, 0x84, 0x00, 0x00, 0x99,],
	[0x66, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x99,],
	[0x66, 0x80, 0x80, 0x00, 0x80, 0x00, 0x80, 0x99,],
	[0x66, 0x80, 0x80, 0x01, 0x84, 0x00, 0x85, 0x99,],
	[0x66, 0x80, 0x80, 0x01, 0x84, 0x00, 0x85, 0x99,],
	[0x66, 0x80, 0x80, 0x02, 0x84, 0x00, 0x86, 0x99,],
	[0x66, 0x80, 0x80, 0x7c, 0x05, 0x00, 0x79, 0x99,],
	[0x66, 0x80, 0x80, 0x80, 0x84, 0x00, 0x04, 0x99,],
	[0x66, 0x80, 0x80, 0x80, 0x84, 0x00, 0x04, 0x99,],
	[0x66, 0x80, 0x80, 0x83, 0xff, 0x00, 0x7c, 0x99,],
	[0x66, 0x80, 0x80, 0x86, 0x84, 0x00, 0x02, 0x99,],
	[0x66, 0x80, 0x80, 0xff, 0x84, 0x00, 0x7b, 0x99,],
	[0x66, 0x80, 0xa7, 0x80, 0x84, 0x00, 0x23, 0x99,],
	[0x66, 0x85, 0x7e, 0x80, 0x84, 0x00, 0xff, 0x99,],
	[0x66, 0xa7, 0x80, 0x80, 0x84, 0x00, 0x23, 0x99,],
].map(b => (crc(b.slice(1, 6)) - b[6]))




bits = 10110001001110101010101
rem  = 00000000
bit  = 10000000
rem  = 10000000
rem  =  00000001
bit  =  00000000
rem  =  00000001
rem  =   00000010
bit  =   10000000
rem  =   10000010
rem  =    00000101
bit  =    10000000
rem  =    10000101
rem  =     00001011
bit  =     00000000
rem  =     00001011
rem  =      00010110

